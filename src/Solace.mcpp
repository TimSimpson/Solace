/**
 * Copyright 2013 Tim Simpson
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
namespace Solace {

class ConsoleColor {
    // Represents an RGB color used in the Windows Console.
    ~import std::ostream;
    ~import std::istream;
public:
    unsigned int R;
    unsigned int G;
    unsigned int B;

    ConsoleColor(const unsigned int & R,
                 const unsigned int & G,
                 const unsigned int & B)
    :   R(R),
        G(G),
        B(B)
    {
    }

    ConsoleColor(istream & stream)
    :   R(0),
        G(0),
        B(0)
    {
        stream >> R;
        stream >> G;
        stream >> B;
    }

    ~global ~friend std::ostream & operator << (std::ostream & stream,
                                                const ConsoleColor & color)
    {
        stream << color.R << " " << color.G << " " << color.B;
        return stream;
    }
};

class ConsoleManager
{
    ~import CONSOLE_SCREEN_BUFFER_INFOEX;
    ~import std::cout;
    ~import std::string;
    ~import boost::filesystem::path;

    ~block "cpp-include" {
        // Declaring references to libraries in Macaroni (or C++- let's be
        // honest here) isn't that easy at the moment. Using these Windows-only
        // compiler commands gets around the issue.
        #pragma comment(lib, "Kernel32.lib")
        #pragma comment (lib, "user32.lib")
        // Including this here turns out to be easier than ~importing it.
        #include <stdexcept>
    }

    private HANDLE console;
    private HWND hWnd;
    private CONSOLE_SCREEN_BUFFER_INFOEX info;
    private WINDOWPLACEMENT place;

    public ConsoleManager()
    :   console(GetStdHandle(STD_OUTPUT_HANDLE)),
        hWnd(GetConsoleWindow()),
        info(),
        place()
    {
        info.cbSize = sizeof(info);
        recordWindowsPosition();
    }

    public const unsigned int ColorCount() const
    {
        return 16;
    }

    public ConsoleColor GetColor(const unsigned int index) const
    {
        if (index > 15) {
            throw std::out_of_range("index");
        }
        const auto & element = info.ColorTable[index];
        const ConsoleColor color(GetRValue(element),
                                 GetGValue(element),
                                 GetBValue(element));
        return color;
    }

    public static path GetSolaceFilesDirectory()
    {
        const size_t bufferSize = 32767;
        char buffer[bufferSize];
        const auto size = GetEnvironmentVariableA(
            "SOLACE_FILES", buffer, bufferSize);
        if (0 == size)
        {
            throw std::runtime_error("SOLACE_FILES environment variable not set.");
        } else if (size > bufferSize) {
            throw std::runtime_error("Value in SOLACE_FILES was too large.");
        }
        string value(buffer, size);
        if (value.size() > 0 && value[value.size() - 1] != '\\')
        {
            value += "\\";
        }
        path p = value;
        return p;
    }

    public void SetColor(const unsigned int index, const ConsoleColor & color)
    {
        if (index > 15) {
            throw std::out_of_range("index");
        }
        info.ColorTable[index] = RGB(color.R, color.G, color.B);
    }

    private void recordWindowsPosition() {
        GetConsoleScreenBufferInfoEx(console, &info);
        // Because it's impossible to do anything with the Windows API without
        // jumping through dozens of hoops we've got to record the Console's
        // window position before changing the colors, since the call to do
        // that will also muck up the Window position.
        GetWindowPlacement(hWnd, &place);
        // It gets better. If Aero snap is used then GetWindowPlacement returns
        // bogus data for the position. So we have to overwrite it's position
        // values with one from GetWindowRect.
        if (!IsZoomed(hWnd))
        {
            if (0 == GetWindowRect(hWnd, &place.rcNormalPosition)) {
                cout << "Error getting Console window rect!\n";
            }
        }
    }

    public void UpdateWindow() {
        // This worked in Windows 10 at first but recently things changed
        // and the color doesn't take effect unless the user changes the
        // colors using the color command.
        // The two lines at the bottom have the same effect as having the user
        // call "COLOR 01\n COLOR 07". Calling this whole thing twice appears
        // to do the trick.
        for (int i = 0; i < 2; ++ i) {
            SetConsoleScreenBufferInfoEx(console, &info);
            SetWindowPlacement(hWnd, &place);

            SetConsoleTextAttribute(console, 0 + 1);
            SetConsoleTextAttribute(console, 0 + 7);
        }
    }

    public ~global bool exists(const path & filePath)
    {
        return boost::filesystem::exists(filePath);
    }
};

} // end namespace Solace


~unit "solace-dump"
{
~import std::cout;
~import std::endl;
~import Solace::ConsoleColor;
~import Solace::ConsoleManager;


~block "h" {
    int solace_dump(int argc, char ** argv);
}


~block "cpp" {

int solace_dump(int argc, char ** argv)
{
    ConsoleManager solace;
    for (unsigned int index = 0; index < solace.ColorCount(); index ++)
    {
        cout << index << " = " << solace.GetColor(index) << "\n";
    }
    return 0;
}

} // end block
} // end unit



~unit "solace-list"
{
    ~import Solace::ConsoleManager;
    ~import std::cout;
    ~import std::cerr;
    ~import std::endl;
    ~import boost::filesystem::path;
    ~import std::stringstream;


    ~block "h" {
        int solace_list(int argc, char ** argv);
    }

    ~block "cpp" {

    int solace_list(int argc, char ** argv)
    {
        using boost::filesystem::directory_iterator;
        using boost::filesystem::is_regular_file;

        try
        {
             const auto directory = ConsoleManager::GetSolaceFilesDirectory();
             if (!Solace::exists(directory)) {
                cerr << "Error: SOLACE_FILES is not set to a directory "
                        "(value = " << directory << ").";
                return 1;
             }
             cout << "Available Solace Files (use with solace-load):" << endl;
             const directory_iterator end;
             for (directory_iterator itr(directory); itr != end; ++ itr) {
                if (is_regular_file(itr->status())) {
                    path p = *itr;
                    cout << "    " << p.stem().string() << endl;
                }
             }
             return 0;
        }
        catch(const std::runtime_error & re)
        {
            cerr << "Error: " << re.what() << "\n";
            return 1;
        }
    }
} // end block
}


~unit "solace-load"
{

~import std::cout;
~import std::cerr;
~import std::endl;
~import std::ifstream;
~import Solace::ConsoleColor;
~import Solace::ConsoleManager;
~import std::pair;
~import boost::filesystem::path;
~import std::string;

~block "h" {
    int solace_load(int argc, char ** argv);
}

~block "cpp" {



pair<path, bool> determineFilePath(const char * argument)
{
    path filePath = argument;
    if (!Solace::exists(filePath)) {
        const auto directory = ConsoleManager::GetSolaceFilesDirectory();
        filePath = directory / argument;
        if (!Solace::exists(filePath)) {
            filePath += ".solace";
            if (!Solace::exists(filePath)) {
                return std::make_pair(filePath, true);
            }
        }
    }
    return std::make_pair(filePath, false);
}

int loadFile(const char * argument)
{
    pair<path, bool> fileInfo;
    try {
        fileInfo = determineFilePath(argument);
    } catch(const std::runtime_error & re) {
        cerr << "Error loading file: " << re.what() << "\n";
        return 1;
    }
    if (fileInfo.second)
    {
        cerr << "File not file found at \"" << fileInfo.first << ".\"\n";
        cerr << "Reminder: the current value of SOLACE_FILES is \""
             << ConsoleManager::GetSolaceFilesDirectory() << "\".\n";
        cerr << "View what files are available using \"solace list\".\n";
        return 1;
    }

    ifstream file(fileInfo.first.string());
    ConsoleManager solace;
    while(!file.eof() && file.good()) {
        unsigned int index;
        file >> index;
        if (file.eof()) {
            break;
        }
        char equalsSign;
        file >> equalsSign;
        if (equalsSign != '=')
        {
            cerr << "Malformed input for index " << index << ".\n";
            return 1;
        }
        const ConsoleColor color(file);
        solace.SetColor(index, color);
    }
    solace.UpdateWindow();
    return 0;
}

int solace_load(int argc, char ** argv)
{
    if (argc < 2)
    {
        cerr << "Usage: "
             << ((argc < 1) ? "solace-load" : argv[0])
             << " color-file\n";
        cerr << "Use \"list\" to view current colors.\n";
        return 1;
    }

    try
    {
        return loadFile(argv[1]);
    }
    catch(const std::exception & e)
    {
        cerr << e.what() << "\n";
        return 1;
    }
}

} // end block
} // end unit


~unit "solace"
    type=exe
{
~import std::string;

~block "cpp" //;  // <-- Sublime syntax highlighter hack
{
    #include "solace-dump.h"
    #include "solace-list.h"
    #include "solace-load.h"


    int main(int argc, char ** argv)
    {
        if (argc < 2) {
            cerr << "Usage: "
                 << ((argc < 1) ? "solace" : argv[0])
                 << " [dump|list|load]\n";
            return 1;
        }
        string option(argv[1]);
        if (option == "dump") {
            return solace_dump(argc -1, argv + 1);
        } else if (option == "list") {
            return solace_list(argc -1, argv + 1);
        } else if (option == "load") {
            return solace_load(argc -1, argv + 1);
        } else {
            cerr << "Invalid option: " << option << "\n";
            return 1;
        }
    }
}
} // end unit
